#!/bin/dash

# Assign arguments
ass_name=$1
sub_num=0
if [ $# -ne 1 ]; then
    echo "usage: take-mark <assignment>" 1>&2
    exit 1
fi

# Check if assignment exists
if [ ! -d ".take/$ass_name" ]; then
    echo "take-mark: assignment $ass_name not found" 1>&2
    exit 1
fi

# Define regular expressions to validate input formats
label_regex="^[a-z][a-zA-Z0-9_]*$"
arguments_regex="^[a-zA-Z0-9_.-]*( [a-zA-Z0-9_.-]*)*$"
stdin_regex="^([!-~ ]|\\n)*$"
options_regex="^[bcdw]*$"

# Iterate over students files
for z_folder in .take/"$ass_name"/z*/; do
    max_subfolder=$(find "$z_folder" -mindepth 1 -maxdepth 1 -type d | sort -V | tail -n 1)
    file_path=$(find "$max_subfolder" -type f)
    file_name=$( echo "$file_path" | sed 's/.*\///' )
    time=""
    zid=$( echo "$file_path" | cut -d'/' -f3 )
    sub_num=$( grep -cE "$ass_name.*$zid.*" .take/submissions.log )
    bytes=$(wc -c < "$file_path")
    # Get last modified timestamp
    time=$( grep -E "$zid.*$file_name.*" .take/submissions.log | tail -n 1 | sed -ne 's/.*@ \(.*\)/\1/p' )
    echo "*** Student $zid - submission $sub_num: $file_name $bytes bytes @ $time"              
    sum_mark=0
    all_mark=0
    pass_num=0
    fail_num=0
    # Iterate over mark files
    for mark_file in ".take/$ass_name/mark"/*; do
        # Ignore empty lines and comments
        while read -r line; do
            if [ -z "$line" ] || [ "$(echo "$line" | cut -c1)" = "#" ]; then
                continue
            fi
            # Clean up previous results
            rm -f .take/result.txt
            rm -f .take/solution_result.txt
            rm -f .take/modify_result.txt
            rm -f .take/modify_solution_result.txt
            rm -f .take/modify_result_stderr.txt
            rm -f .take/modify_solution_result_stderr.txt
            result_exit_code=0
            solution_result_exit_code=0
            # Process test case line
            pre_line=$( echo "$line" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/__NEW__/g' )
            process_line=$( echo "$pre_line" | sed 's/__NEW__$/\\n/' )           
            label=$( echo "$process_line" | cut -d'|' -f1 )
            arguments=$( echo "$process_line" | cut -d'|' -f2 | tr -s ' ' )
            # Special handling for stdin characters
            if echo "$process_line" | grep -q "__NEW__"; then
                stdin=$( echo "$process_line" | cut -d'|' -f3 | tr '__NEW__' ' ' | tr -s ' ' | xargs -n 1 )
            else
                stdin=$( echo "$process_line" | cut -d'|' -f3 )
            fi
            options=$( echo "$process_line" | cut -d'|' -f4 )
            every_marks=$( echo "$process_line" | cut -d'|' -f5 )
            # Validate label name
            if ! echo "$label" | grep -Eq "$label_regex"; then
                echo "take-mark: invalid mark input: $label" 1>&2
                exit 1
            fi
            # Validate arguments name
            if ! echo "$arguments" | grep -Eq "$arguments_regex"; then
                echo "take-mark: invalid mark input: $arguments" 1>&2
                exit 1
            fi
            # Validate stdin name
            if ! echo "$stdin" | grep -Eq "$stdin_regex"; then
                echo "take-mark: invalid mark input: $stdin" 1>&2
                exit 1
            fi
            # Validate options name
            if ! echo "$options" | grep -Eq "$options_regex"; then
                echo "take-mark: invalid mark input: $options" 1>&2
                exit 1
            fi
            # Run student's program
            printf '%s' "$stdin" | ./"$file_path" $arguments >> .take/result.txt 2> .take/modify_result_stderr.txt
            result_exit_code="$?"
            # Compare against each solution file
            for solution_file in ".take/$ass_name/solution"/*; do
                # Run solution's file
                printf '%s' "$stdin" | ./"$solution_file" $arguments >> .take/solution_result.txt 2> .take/modify_solution_result_stderr.txt
                solution_result_exit_code="$?"
                cp .take/result.txt .take/modify_result.txt
                cp .take/solution_result.txt .take/modify_solution_result.txt
                # Apply special comparison options
                if echo "$options" | grep -q "b"; then
                    sed -i '/^$/d' .take/modify_result.txt
                    sed -i '/^$/d' .take/modify_solution_result.txt
                fi
                if echo "$options" | grep -q "c"; then
                    tr '[:upper:]' '[:lower:]' < .take/modify_result.txt > .take/temp_modify_result.txt && cp .take/temp_modify_result.txt .take/modify_result.txt
                    tr '[:upper:]' '[:lower:]' < .take/modify_solution_result.txt > .take/temp_modify_solution_result.txt && cp .take/temp_modify_solution_result.txt .take/modify_solution_result.txt
                    rm .take/temp_modify_solution_result.txt
                    rm .take/temp_modify_result.txt
                fi
                if echo "$options" | grep -q "d"; then
                    sed -i 's/[^0-9]//g' .take/modify_result.txt
                    sed -i 's/[^0-9]//g' .take/modify_solution_result.txt
                fi
                if echo "$options" | grep -q "w"; then
                    tr -d ' \t' < .take/modify_result.txt > .take/temp_modify_result.txt && cp .take/temp_modify_result.txt .take/modify_result.txt
                    tr -d ' \t' < .take/modify_solution_result.txt > .take/temp_modify_solution_result.txt && cp .take/temp_modify_solution_result.txt .take/modify_solution_result.txt                                
                    rm .take/temp_modify_solution_result.txt
                    rm .take/temp_modify_result.txt
                fi
                all_mark=$(( all_mark + every_marks ))
                # Output result
                if cmp -s .take/modify_result.txt .take/modify_solution_result.txt && diff -q .take/modify_result_stderr.txt .take/modify_solution_result_stderr.txt >/dev/null && [ "$result_exit_code" -eq "$solution_result_exit_code" ]; then

                    echo "* Test $label passed ($every_marks marks)."
                    pass_num=$(( pass_num + 1 ))
                    sum_mark=$(( sum_mark + every_marks ))
                else
                    echo "* Test $label failed."
                    fail_num=$(( fail_num + 1 ))
                    # Output incorrect results
                    if cmp -s .take/modify_result.txt .take/modify_solution_result.txt; then
                        :
                    else
                        result_bytes=$( wc -c < .take/modify_result.txt )
                        solution_result_bytes=$( wc -c < .take/modify_solution_result.txt )
                        last_char_result=$(tail -c 1 .take/modify_result.txt)
                        last_char_solution_result=$(tail -c 1 .take/modify_solution_result.txt)
                        # No stdout expected
                        if [ "$solution_result_bytes" -eq 0 ] && [ "$result_bytes" -ne 0 ]; then
                            echo "--- No stdout expected, these $result_bytes bytes produced:"
                            cat .take/modify_solution_result.txt
                            echo ""
                        # No stdout produced
                        elif [ "$solution_result_bytes" -ne 0 ] && [ "$result_bytes" -eq 0 ]; then
                            echo "--- No stdout produced, these $solution_result_bytes bytes expected:"
                            cat .take/modify_solution_result.txt
                            echo ""
                        # Extra newline                     
                        elif [ $(( result_bytes - solution_result_bytes )) -eq 1 ] && [ "$last_char_result" = "" ]; then
                            cat .take/modify_solution_result.txt > .take/new_modify_solution_result.txt
                            printf "\n" >> .take/new_modify_solution_result.txt
                            if cmp -s .take/modify_result.txt .take/new_modify_solution_result.txt; then
                                echo "Extra newline at end of stdout"
                            else
                                echo "--- Incorrect stdout of $result_bytes bytes:"
                                cat .take/modify_result.txt
                                echo ""
                                echo "--- Correct stdout is these $solution_result_bytes bytes:"
                                cat .take/modify_solution_result.txt
                                echo ""
                            fi
                            rm .take/new_modify_solution_result.txt
                        # Miss newline
                        elif [ $(( solution_result_bytes - result_bytes )) -eq 1 ] && [ "$last_char_solution_result" = "" ]; then
                            cat .take/modify_result.txt > .take/new_modify_result.txt
                            printf "\n" >> .take/new_modify_result.txt
                            if cmp -s .take/modify_solution_result.txt .take/new_modify_result.txt; then
                                echo "Missing newline at end of stdout"
                            else
                                echo "--- Incorrect stdout of $result_bytes bytes:"
                                cat .take/modify_result.txt
                                echo ""
                                echo "--- Correct stdout is these $solution_result_bytes bytes:"
                                cat .take/modify_solution_result.txt
                                echo ""
                            fi
                            rm .take/new_modify_result.txt
                        # Common error
                        else
                            echo "--- Incorrect stdout of $result_bytes bytes:"
                            cat .take/modify_result.txt
                            echo ""
                            echo "--- Correct stdout is these $solution_result_bytes bytes:"
                            cat .take/modify_solution_result.txt
                            echo ""
                        fi
                    fi
                    # Output incorrect stderr_results
                    if diff -q .take/modify_result_stderr.txt .take/modify_solution_result_stderr.txt >/dev/null; then
                        :
                    else
                        result_stderr_bytes=$( wc -c < .take/modify_result_stderr.txt )
                        solution_result_stderr_bytes=$( wc -c < .take/modify_solution_result_stderr.txt )
                        last_char_result_stderr=$(tail -c 1 .take/modify_result_stderr.txt)
                        last_char_solution_result_stderr=$(tail -c 1 .take/modify_solution_result_stderr.txt)  
                        # No stderr expected
                        if [ "$solution_result_stderr_bytes" -eq 0 ] && [ "$result_stderr_bytes" -ne 0 ]; then
                            echo "--- No stderr expected, these $result_stderr_bytes bytes produced:"
                            cat .take/modify_result_stderr.txt
                            echo ""
                        # No stderr produced
                        elif [ "$solution_result_stderr_bytes" -ne 0 ] && [ "$result_stderr_bytes" -eq 0 ]; then
                            echo "--- No stderr produced, these $solution_result_stderr_bytes bytes expected:"
                            cat .take/modify_solution_result_stderr.txt
                            echo ""   
                        # Extra newline
                        elif [ $(( result_stderr_bytes - solution_result_stderr_bytes )) -eq 1 ] && [ "$last_char_result_stderr" = "" ]; then
                            cat .take/modify_solution_result_stderr.txt > .take/new_modify_solution_result_stderr.txt
                            printf "\n" >> .take/new_modify_solution_result_stderr.txt
                            if cmp -s .take/modify_result_stderr.txt .take/new_modify_solution_result_stderr.txt; then
                                echo "Extra newline at end of stderr"
                            else
                                echo "--- Incorrect stderr of $result_stderr_bytes bytes:"
                                # #$modify_result\n
                                cat .take/modify_result_stderr.txt
                                echo ""
                                echo "--- Correct stderr is these $solution_result_stderr_bytes bytes:"
                                # #$modify_solution_result\n
                                cat .take/modify_solution_result_stderr.txt
                                echo ""
                            fi
                            rm .take/new_modify_solution_result.txt
                        # Miss newline
                        elif [ $(( solution_result_stderr_bytes - result_stderr_bytes )) -eq 1 ] && [ "$last_char_solution_result_stderr" = "" ]; then
                            cat .take/modify_result_stderr.txt > .take/new_modify_result_stderr.txt
                            printf "\n" >> .take/new_modify_result_stderr.txt
                            if cmp -s .take/modify_solution_result_stderr.txt .take/new_modify_result_stderr.txt; then
                                echo "Missing newline at end of stderr"
                            else
                                echo "--- Incorrect stderr of $result_stderr_bytes bytes:"
                                # #$modify_result\n
                                cat .take/modify_result_stderr.txt
                                echo ""
                                echo "--- Correct stderr is these $solution_result_stderr_bytes bytes:"
                                # #$modify_solution_result\n
                                cat .take/modify_solution_result_stderr.txt
                                echo ""
                            fi
                            rm .take/new_modify_result_stderr.txt
                        # Common error
                        else
                            echo "--- Incorrect stderr of $result_stderr_bytes bytes:"
                            # #$modify_result\n
                            cat .take/modify_result_stderr.txt
                            echo ""
                            echo "--- Correct stderr is these $solution_result_stderr_bytes bytes:"
                            # #$modify_solution_result\n
                            cat .take/modify_solution_result_stderr.txt
                            echo ""
                        fi
                    fi
                    # Output incorrect exit_results
                    if [ "$result_exit_code" -ne "$solution_result_exit_code" ]; then
                        echo "Exit status of $result_exit_code incorrect should be $solution_result_exit_code"
                    fi
                fi
            done
        done < "$mark_file"
    done
    # Output all results
    echo "** $pass_num tests passed, $fail_num tests failed - mark: $sum_mark/$all_mark"
    rm -f .take/result.txt
    rm -f .take/solution_result.txt
    rm -f .take/modify_result.txt
    rm -f .take/modify_solution_result.txt
    rm -f .take/modify_result_stderr.txt
    rm -f .take/modify_solution_result_stderr.txt
done